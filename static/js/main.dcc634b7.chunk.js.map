{"version":3,"sources":["containers/Display.js","actions/types.js","actions/index.js","containers/OperatorButton.js","containers/NumberButton.js","containers/ClearButton.js","containers/ZeroButton.js","containers/DecimalButton.js","containers/EqualsButton.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["Display","react_default","a","createElement","id","this","props","display","Component","connect","state","UPDATE_DISPLAY","CLEAR","INPUT_NUMBER","INPUT_DECIMAL","EQUALS","INPUT_OPERATOR","REPLACE_FIRST_ZERO","UPDATE_POINTER","REPLACE_LAST_OPERATOR","updateDisplay","input","dispatch","type","payload","updatePointer","clear","inputNumber","inputOperator","OperatorButton","handleClick","inputValue","RegExp","test","_this","pointer","replaceLastOperator","_this2","_this$props","inputType","value","onClick","NumberButton","length","replaceFirstZero","ClearButton","buttonPress","ZeroButton","reg","DecimalButton","mapBackwards","mapped","Object","toConsumableArray","reverse","map","item","index","operatorIndex","indexOf","sliced","slice","reduce","prev","curr","inputDecimal","_this$props2","className","EqualsButton","equals","App","containers_Display","containers_NumberButton","containers_OperatorButton","containers_ZeroButton","containers_DecimalButton","containers_ClearButton","containers_EqualsButton","Boolean","window","location","hostname","match","initialState","rootReducer","arguments","undefined","action","types","assign","concat","objectSpread","math","eval","join","store","createStore","composeWithDevTools","applyMiddleware","reduxThunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcc634b7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport connect from \"react-redux/es/connect/connect\";\n\nclass Display extends Component {\n  render() {\n    return <div id=\"display\">{this.props.display}</div>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    display: state.display\n  };\n};\n\nexport default connect(mapStateToProps)(Display);\n","export const UPDATE_DISPLAY = \"UPDATE_DISPLAY\";\nexport const CLEAR = \"CLEAR\";\nexport const INPUT_NUMBER = \"INPUT_NUMBER\";\nexport const INPUT_DECIMAL = \"INPUT_DECIMAL\";\nexport const EQUALS = \"EQUALS\";\nexport const INPUT_OPERATOR = \"INPUT_OPERATOR\";\nexport const REPLACE_FIRST_ZERO = \"REPLACE_FIRST_ZERO\";\nexport const UPDATE_POINTER = \"UPDATE_POINTER\";\nexport const REPLACE_LAST_OPERATOR = \"REPLACE_LAST_OPERATOR\";\n","import {\n  INPUT_OPERATOR,\n  CLEAR,\n  EQUALS,\n  INPUT_DECIMAL,\n  INPUT_NUMBER,\n  UPDATE_DISPLAY,\n  REPLACE_FIRST_ZERO,\n  UPDATE_POINTER,\n  REPLACE_LAST_OPERATOR\n} from \"./types\";\n\nexport function updateDisplay(input) {\n  return dispatch => {\n    dispatch({\n      type: UPDATE_DISPLAY,\n      payload: input\n    });\n    dispatch(updatePointer(input));\n  };\n}\n\nexport function clear() {\n  return {\n    type: CLEAR\n  };\n}\n\nexport function equals() {\n  return dispatch => {\n    dispatch({\n      type: EQUALS\n    });\n    dispatch(updatePointer());\n  };\n}\n\nexport function inputDecimal(input) {\n  return dispatch => {\n    dispatch({\n      type: INPUT_DECIMAL,\n      payload: input\n    });\n    dispatch(updateDisplay(input));\n    dispatch(updatePointer(input));\n  };\n}\n\nexport function inputNumber(input) {\n  return dispatch => {\n    dispatch({\n      type: INPUT_NUMBER,\n      payload: input\n    });\n    dispatch(updateDisplay(input));\n  };\n}\n\nexport function updatePointer(input) {\n  return {\n    type: UPDATE_POINTER,\n    payload: input\n  };\n}\n\nexport function replaceFirstZero(input) {\n  return dispatch => {\n    dispatch({\n      type: REPLACE_FIRST_ZERO,\n      payload: input\n    });\n    dispatch(updatePointer(input));\n  };\n}\n\nexport function inputOperator(input) {\n  return dispatch => {\n    dispatch({\n      type: INPUT_OPERATOR,\n      payload: input\n    });\n    dispatch(updateDisplay(input));\n  };\n}\n\nexport function replaceLastOperator(input) {\n  return dispatch => {\n    dispatch({\n      type: REPLACE_LAST_OPERATOR,\n      payload: input\n    });\n    dispatch(inputOperator(input));\n  };\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { inputOperator, replaceLastOperator } from \"../actions\";\n\nclass OperatorButton extends Component {\n  handleClick = inputValue => {\n    const reg = new RegExp(\"^([+\\\\-*/])$\");\n\n    if (!reg.test(this.props.pointer)) {\n      this.props.inputOperator(inputValue);\n    } else {\n      this.props.replaceLastOperator(inputValue);\n    }\n  };\n\n  render() {\n    const { inputType, value } = this.props;\n\n    return (\n      <div>\n        <button\n          id={inputType}\n          onClick={() => this.handleClick(value, inputType)}\n        >\n          {value}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    pointer: state.pointer,\n    display: state.display\n  }),\n  { inputOperator, replaceLastOperator }\n)(OperatorButton);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { inputNumber, replaceFirstZero } from \"../actions\";\n\nclass NumberButton extends Component {\n  handleClick = inputValue => {\n    if (this.props.pointer === 0 && this.props.display.length === 1) {\n      this.props.replaceFirstZero(inputValue);\n    } else {\n      this.props.inputNumber(inputValue);\n    }\n  };\n\n  render() {\n    const { inputType, value } = this.props;\n\n    return (\n      <div>\n        <button\n          id={inputType}\n          onClick={() => this.handleClick(value, inputType)}\n        >\n          {value}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    pointer: state.pointer,\n    display: state.display\n  }),\n  { inputNumber, replaceFirstZero }\n)(NumberButton);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { clear, updateDisplay, inputOperator } from \"../actions\";\n\nclass ClearButton extends Component {\n  handleClick = () => {\n    this.props.clear();\n  };\n\n  render() {\n    const { inputType, value } = this.props;\n\n    return (\n      <div>\n        <button id={inputType} onClick={() => this.handleClick()}>\n          {value}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    pointer: state.pointer,\n    display: state.display\n  }),\n  { updateDisplay, clear, buttonPress: inputOperator }\n)(ClearButton);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { clear, updateDisplay, inputOperator, inputNumber } from \"../actions\";\n\nclass ZeroButton extends Component {\n  handleClick = inputValue => {\n    if (this.props.pointer !== 0 && this.props.display.length >= 1) {\n      this.props.inputNumber(inputValue);\n    }\n  };\n\n  render() {\n    const { inputType, value } = this.props;\n\n    return (\n      <div>\n        <button id={inputType} onClick={() => this.handleClick(value)}>\n          {value}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    pointer: state.pointer,\n    display: state.display\n  }),\n  { updateDisplay, clear, buttonPress: inputOperator, inputNumber }\n)(ZeroButton);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { inputDecimal } from \"../actions\";\nconst reg = new RegExp(\"^([+\\\\-*/])$\");\nclass DecimalButton extends Component {\n  //map backwards from pointer until you find an operator\n  //split that chunk into an array\n  //filter that array and if there is a decimal don't put a new one in.\n\n  mapBackwards = input => {\n    const mapped = [...input].reverse().map((item, index) => {\n      if (reg.test(item)) {\n        return \"operator\";\n      } else if (item === \".\") {\n        return true;\n      }\n      return false;\n    });\n\n    const operatorIndex = mapped.indexOf(\"operator\");\n\n    const sliced = mapped.slice(0, operatorIndex);\n    if (sliced.length) {\n      return sliced.reduce((prev, curr) => {\n        if (prev === true) {\n          return true;\n        } else if (curr === true) {\n          return true;\n        }\n        return false;\n      });\n    }\n    return false;\n  };\n\n  handleClick = inputValue => {\n    const { display, pointer } = this.props;\n\n    if (pointer !== \".\") {\n      if (this.mapBackwards(display) === true) {\n      } else {\n        this.props.inputDecimal(inputValue);\n      }\n    }\n  };\n\n  render() {\n    const { inputType, value } = this.props;\n\n    return (\n      <div className=\"decimal\">\n        <button id={inputType} onClick={() => this.handleClick(value)}>\n          {value}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    pointer: state.pointer,\n    display: state.display\n  }),\n  { inputDecimal }\n)(DecimalButton);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { equals } from \"../actions\";\n\nclass EqualsButton extends Component {\n  handleClick = () => {\n    this.props.equals();\n  };\n\n  render() {\n    const { inputType, value } = this.props;\n\n    return (\n      <div>\n        <button id={inputType} onClick={() => this.handleClick()}>\n          {value}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    pointer: state.pointer,\n    display: state.display\n  }),\n  { equals }\n)(EqualsButton);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Display from \"./containers/Display\";\nimport OperatorButton from \"./containers/OperatorButton\";\nimport NumberButton from \"./containers/NumberButton\";\nimport ClearButton from \"./containers/ClearButton\";\nimport ZeroButton from \"./containers/ZeroButton\";\nimport DecimalButton from \"./containers/DecimalButton\";\nimport EqualsButton from \"./containers/EqualsButton\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Display />\n        <div className=\"grid\">\n          <div className=\"grid-2\">\n            <NumberButton inputType=\"seven\" value=\"7\" />\n            <NumberButton inputType=\"eight\" value=\"8\" />\n            <NumberButton inputType=\"nine\" value=\"9\" />\n            <OperatorButton inputType=\"subtract\" value=\"-\" />\n            <NumberButton inputType=\"four\" value=\"4\" />\n            <NumberButton inputType=\"five\" value=\"5\" />\n            <NumberButton inputType=\"six\" value=\"6\" />\n            <OperatorButton inputType=\"add\" value=\"+\" />\n            <NumberButton inputType=\"one\" value=\"1\" />\n            <NumberButton inputType=\"two\" value=\"2\" />\n            <NumberButton inputType=\"three\" value=\"3\" />\n            <ZeroButton inputType=\"zero\" value=\"0\" />\n            <DecimalButton inputType=\"decimal\" value=\".\" />\n          </div>\n          <div>\n            <ClearButton inputType=\"clear\" value=\"AC\" />\n            <OperatorButton inputType=\"divide\" value=\"/\" />\n            <OperatorButton inputType=\"multiply\" value=\"*\" />\n            <EqualsButton inputType=\"equals\" value=\"=\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from \"../actions/types\";\nimport math from \"mathjs\";\n\nconst initialState = {\n  display: [0],\n  pointer: 0\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.UPDATE_DISPLAY:\n      return Object.assign({}, state, {\n        display: state.display.concat(action.payload)\n      });\n    case types.UPDATE_POINTER:\n      return {\n        ...state,\n        pointer: state.display[state.display.length - 1]\n      };\n    case types.REPLACE_LAST_OPERATOR:\n      return {\n        ...state,\n        display: [...state.display.slice(0, -1)]\n      };\n    case types.EQUALS:\n      return {\n        ...state,\n        display: [math.eval(state.display.join(\"\"))]\n      };\n    case types.INPUT_DECIMAL:\n      return {\n        ...state\n      };\n    case types.INPUT_OPERATOR:\n      return {\n        ...state\n      };\n    case types.REPLACE_FIRST_ZERO:\n      return {\n        ...state,\n        display: [action.payload]\n      };\n    case types.CLEAR:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}